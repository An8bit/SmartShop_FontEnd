// ƒê·∫°o H·ªØu: Trang gi·ªè h√†ng, hi·ªÉn th·ªã v√† thao t√°c v·ªõi cartService

import React, { useEffect, useState } from "react";
import { getCart, updateCartItem, removeFromCart, clearCart } from "../../services/cartService";
import styles from "./CartPage.module.css";
import { useNavigate } from "react-router-dom";
import Header from "../../components/features/Header/Header";
import Footer from "../../components/common/Footer/Footer";
import { useToast } from "../../components/common/Toast/ToastProvider";

const CartPage: React.FC = () => {
  const [cart, setCart] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const navigate = useNavigate();
  const { showToast } = useToast();

  const fetchCart = async () => {
    setLoading(true);
    setError(null);
    try {
      const data = await getCart();
      console.log("Cart data received:", data);
      if (data && data.items) {
        console.log("First cart item:", data.items[0]);
      }
      setCart(data);
    } catch (err: any) {
      setError(err.message || "L·ªói l·∫•y gi·ªè h√†ng");
    }
    setLoading(false);
  };

  useEffect(() => {
    fetchCart();
    // L·∫Øng nghe events ƒë·ªÉ auto-refresh cart
    const handleCartChanged = () => {
      console.log("Cart changed event detected, refreshing cart...");
      fetchCart();
    };
    
    const handleUserChanged = () => {
      console.log("User changed event detected, refreshing cart...");
      // Delay m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o merge cart ho√†n t·∫•t
      setTimeout(() => {
        fetchCart();
      }, 500);
    };

    window.addEventListener("cartChanged", handleCartChanged);
    window.addEventListener("userChanged", handleUserChanged);

    return () => {
      window.removeEventListener("cartChanged", handleCartChanged);
      window.removeEventListener("userChanged", handleUserChanged);
    };
  }, []);

  const handleUpdate = async (cartItemId: number, quantity: number) => {
    if (quantity < 1) return;
    try {
      await updateCartItem(cartItemId, quantity);
      await fetchCart();
      window.dispatchEvent(new CustomEvent("cartChanged"));
      showToast("ƒê√£ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m", "success");
    } catch (err: any) {
      setError(err.message || "L·ªói c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng");
      showToast(err.message || "L·ªói c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng", "error");
    }
  };

  const handleRemove = async (cartItemId: number) => {
    try {
      await removeFromCart(cartItemId);
      await fetchCart();
      window.dispatchEvent(new CustomEvent("cartChanged"));
      showToast("ƒê√£ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng", "success");
    } catch (err: any) {
      setError(err.message || "L·ªói x√≥a s·∫£n ph·∫©m");
      showToast(err.message || "L·ªói x√≥a s·∫£n ph·∫©m", "error");
    }
  };

  const handleClear = async () => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a to√†n b·ªô gi·ªè h√†ng?")) return;
    
    try {
      await clearCart();
      await fetchCart();
      window.dispatchEvent(new CustomEvent("cartChanged"));
      showToast("ƒê√£ x√≥a to√†n b·ªô gi·ªè h√†ng", "success");
    } catch (err: any) {
      setError(err.message || "L·ªói x√≥a gi·ªè h√†ng");
      showToast(err.message || "L·ªói x√≥a gi·ªè h√†ng", "error");
    }
  };

  if (loading) return (
    <>
      <Header />
      <div className={styles["cart-container"]}>
        <div className={styles["loading"]}>
          <div className={styles["spinner"]}></div>
          <p>ƒêang t·∫£i gi·ªè h√†ng...</p>
        </div>
      </div>
      <Footer />
    </>
  );
  
  if (error) return (
    <>
      <Header />
      <div className={styles["cart-container"]}>
        <div className={styles["error"]}>
          <h3>‚ùå C√≥ l·ªói x·∫£y ra</h3>
          <p>{error}</p>
          <button onClick={fetchCart} className={styles["retry-btn"]}>Th·ª≠ l·∫°i</button>
        </div>
      </div>
      <Footer />
    </>
  );
  
  if (!cart || !cart.items || cart.items.length === 0) {
    console.log("Empty cart condition:", { cart, hasItems: cart?.items?.length });
    return (
      <>
        <Header />
        <div className={styles["cart-container"]}>
          <div className={styles["empty-cart"]}>
            <div className={styles["empty-icon"]}>üõí</div>
            <h2>Gi·ªè h√†ng tr·ªëng</h2>
            <p>B·∫°n ch∆∞a th√™m s·∫£n ph·∫©m n√†o v√†o gi·ªè h√†ng</p>
            <button className={styles["continue-shopping"]} onClick={() => navigate("/products/all")}>
              Kh√°m ph√° s·∫£n ph·∫©m
            </button>
          </div>
        </div>
        <Footer />
      </>
    );
  }

  console.log("Cart has items, rendering table. Total items:", cart.items.length);

  return (
    <>
      <Header />
      <div className={styles["cart-container"]}>
        <h2>üõçÔ∏è Gi·ªè h√†ng c·ªßa b·∫°n</h2>
      <table className={styles["cart-table"]}>
        <thead>
          <tr>
            <th>S·∫£n ph·∫©m</th>
            <th>Gi√°</th>
            <th>S·ªë l∆∞·ª£ng</th>
            <th>T·ªïng</th>
            <th></th>
          </tr>
        </thead>
        <tbody>
          {cart.items.map((item: any) => {
            console.log("Rendering cart item:", item);
            
            // S·ª≠ d·ª•ng ƒë√∫ng c·∫•u tr√∫c t·ª´ Product interface
            const productName = item.product?.name || 
                               item.productName ||
                               "S·∫£n ph·∫©m";
                               
            const productImage = item.product?.imageUrl || 
                                 item.productImage ||
                                 "/images/default-product.svg";
                                 
            // ∆Øu ti√™n discountedPrice cho s·∫£n ph·∫©m flashsale, sau ƒë√≥ price th√¥ng th∆∞·ªùng
            const unitPrice = item.product?.discountedPrice || 
                             item.product?.price || 
                             item.price || 
                             item.unitPrice ||
                             0;
                             
            const totalPrice = item.totalPrice || 
                              (item.quantity * unitPrice) ||
                              0;
                              
            // Hi·ªÉn th·ªã th√¥ng tin gi·∫£m gi√° n·∫øu c√≥
            const hasDiscount = item.product?.discountedPrice && 
                               item.product?.price && 
                               item.product.discountedPrice < item.product.price;
                              
            const variantText = item.variant ? 
                               `${item.variant.color} - ${item.variant.size}` : 
                               "";
            
            return (
            <tr key={item.cartItemId || item.id}>
              <td>
                <div className={styles["cart-product"]}>
                  <img 
                    src={productImage} 
                    alt={productName}
                    onError={(e) => {
                      e.currentTarget.src = "/images/default-product.svg";
                    }}
                  />
                  <div>
                    <span>{productName}</span>
                    {variantText && <small>Ph√¢n lo·∫°i: {variantText}</small>}
                    {item.product?.categoryName && <small>Danh m·ª•c: {item.product.categoryName}</small>}
                  </div>
                </div>
              </td>
              <td>
                <div className={styles["price-info"]}>
                  {hasDiscount ? (
                    <div>
                      <div className={styles["discounted-price"]}>
                        {unitPrice?.toLocaleString()}‚Ç´
                        <span className={styles["flash-sale-badge"]}>FLASH SALE</span>
                      </div>
                      <div className={styles["original-price"]}>
                        <s>{item.product?.price?.toLocaleString()}‚Ç´</s>
                      </div>
                    </div>
                  ) : (
                    <span>{unitPrice?.toLocaleString()}‚Ç´</span>
                  )}
                </div>
              </td>
              <td>
                <input
                  type="number"
                  min={1}
                  value={item.quantity}
                  onChange={e => handleUpdate(item.cartItemId || item.id, Number(e.target.value))}
                />
              </td>
              <td>{totalPrice?.toLocaleString()}‚Ç´</td>
              <td>
                <button onClick={() => handleRemove(item.cartItemId || item.id)}>X√≥a</button>
              </td>
            </tr>
            );
          })}
        </tbody>
      </table>
      <div className={styles["cart-summary"]}>
        <span>T·ªïng s·ªë l∆∞·ª£ng: {cart.totalQuantity || cart.totalItems || cart.items?.length || 0}</span>
        <span>T·ªïng ti·ªÅn: {(cart.totalPrice || cart.totalAmount || 0)?.toLocaleString()}‚Ç´</span>
      </div>
        <div className={styles["cart-actions"]}>
          <button onClick={handleClear} className={styles["clear-btn"]}>
            üóëÔ∏è X√≥a to√†n b·ªô
          </button>
          <button onClick={() => navigate("/products/all")} className={styles["continue-btn"]}>
            üõçÔ∏è Ti·∫øp t·ª•c mua s·∫Øm
          </button>
          <button 
            onClick={() => navigate("/checkout", { 
              state: { cartItems: cart?.items || [] } 
            })} 
            className={styles["checkout-btn"]}
            disabled={!cart?.items || cart.items.length === 0}
          >
            üí≥ Thanh to√°n
          </button>
        </div>
      </div>
      <Footer />
    </>
  );
};export default CartPage;
